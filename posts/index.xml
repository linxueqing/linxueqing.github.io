<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 以梦为马</title>
    <link>https://linxueqing.github.io/posts/</link>
    <description>Recent content in Posts on 以梦为马</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Mon, 23 Mar 2020 22:56:15 +0800</lastBuildDate>
    
	<atom:link href="https://linxueqing.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>jQuery 的常用功能</title>
      <link>https://linxueqing.github.io/posts/jquery/</link>
      <pubDate>Mon, 23 Mar 2020 22:56:15 +0800</pubDate>
      
      <guid>https://linxueqing.github.io/posts/jquery/</guid>
      <description>jQuery 的常用功能  jQuery 如何获取元素  　//选择表达式可以是CSS选择器： $(document) //选择整个文档对象 $(&#39;#myId&#39;) //选择ID为myId的网页元素 $(&#39;div.myClass&#39;) // 选择class为myClass的div元素 $(&#39;input[name=first]&#39;) // 选择name属性等于first的input元素 //也可以是jQuery特有的表达式： $(&#39;a:first&#39;) //选择网页中第一个a元素 $(&#39;tr:odd&#39;) //选择表格的奇数行 $(&#39;#myForm :input&#39;) // 选择表单中的input元素 $(&#39;div:visible&#39;) //选择可见的div元素 $(&#39;div:gt(2)&#39;) // 选择所有的div元素，除了前三个 $(&#39;div:animated&#39;) // 选择当前处于动画状态的div元素 jQuery 的链式操作是怎样的  就是最终选中网页元素以后，可以对它进行一系列操作，并且所有操作可以连接在一起，以链条的形式写出来
$(&#39;div&#39;).find(&#39;h3&#39;).eq(2).html(&#39;Hello&#39;); 分解开来：
$(&#39;div&#39;) //找到div元素 .find(&#39;h3&#39;) //选择其中的h3元素 .eq(2) //选择第3个h3元素 .html(&#39;Hello&#39;); //将它的内容改为Hello  jQuery 如何创建元素
创建新元素的方法非常简单，只要把新元素直接传入 jQuery 的构造函数就行
  $(&#39;&amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;&#39;); $(&#39;&amp;lt;li class=&amp;quot;new&amp;quot;&amp;gt;new list item&amp;lt;/li&amp;gt;&#39;); $(&#39;ul&#39;).append(&#39;&amp;lt;li&amp;gt;list item&amp;lt;/li&amp;gt;&#39;); jQuery 如何移动元素  第一种方法是使用.insertAfter()，把 div 元素移动 p 元素后面：</description>
    </item>
    
    <item>
      <title>四种排序算法</title>
      <link>https://linxueqing.github.io/posts/sort/</link>
      <pubDate>Wed, 18 Mar 2020 22:14:46 +0800</pubDate>
      
      <guid>https://linxueqing.github.io/posts/sort/</guid>
      <description>四种排序算法  选择排序  //循环里第i个数字与最小数字交换顺序 let swap = (array, i, j) =&amp;gt; { let temp = array[i] array[i] = array[j] array[j] = temp } //找到数组最小数字的索引，index一直标记着 let minIndex = (numbers) =&amp;gt; { let index = 0 for(let i=1; i&amp;lt;numbers.length; i++){ if(numbers[i] &amp;lt; numbers[index]){ index = i } } return index } let sort = (numbers) =&amp;gt; { for(let i=0; i&amp;lt; numbers.length -1; i++){ console.log(numbers,i,numbers.slice(i),) let index = minIndex(numbers.slice(i))+ i if(index!==i){ swap(numbers, index, i) } } return numbers } console.</description>
    </item>
    
    <item>
      <title>如何理解递归</title>
      <link>https://linxueqing.github.io/posts/%E9%80%92%E5%BD%92/</link>
      <pubDate>Mon, 16 Mar 2020 20:02:09 +0800</pubDate>
      
      <guid>https://linxueqing.github.io/posts/%E9%80%92%E5%BD%92/</guid>
      <description>如何理解递归  判断两个数的大小  let minOf2 = (numbers) =&amp;gt; { if(numbers[0] &amp;lt; numbers[1]){ return numbers[0] }else{ return numbers[1] } }  你可以简写为  let minOf2 = numbers =&amp;gt; numbers[0] &amp;lt; numbers[1] ? numbers[0] : numbers[1]  或者再简写为  let minOf2 = ([a, b]) =&amp;gt; a &amp;lt; b ? a : b //这种写法叫析构赋值 现成的 API, JS 内置了 Math 对象 Math.min  三个数找出最小的那个  let minOf3 = ([a,b,c]) =&amp;gt; { return minOf2([a, minOf2([b,c])]) }  四个数找出最小的那个  let minOf4 = ([a,b,c,d]) =&amp;gt; { return minOf2([a, minOf3([b,c,d])]) }  任意长度数组求最小值  let min = (numbers) =&amp;gt; { return min([numbers[0], min(numbers.</description>
    </item>
    
    <item>
      <title>JS 函数的执行时机</title>
      <link>https://linxueqing.github.io/posts/js0310/</link>
      <pubDate>Tue, 10 Mar 2020 22:51:15 +0800</pubDate>
      
      <guid>https://linxueqing.github.io/posts/js0310/</guid>
      <description>JS 函数的执行时机  看看下面这段代码  let i = 0 for(i = 0; i&amp;lt;6; i++){ setTimeout(()=&amp;gt;{ console.log(i) },0) } 执行结果：会打印 6 个 6
为什么呢？
 for 循环执行完 setTimeout 要等 for 循环执行完再执行 这时候 i=6 再打印 6 次 6   写出让上面代码打印 0、1、2、3、4、5 的方法  for(let i = 0; i&amp;lt;6; i++){ setTimeout(()=&amp;gt;{ console.log(i) },0) } 这里每次把 i 复制一份打印出来，不跟随新的 i 变化，循环后形成 6 个新的 i 加上本身定义的 i，一共 7 个 i
 除了使用 for let 配合，还有什么其他方法可以打印出 0、1、2、3、4、5  for(let i = 0 ; i &amp;lt; 6 ; i++){ !</description>
    </item>
    
    <item>
      <title>Js对象基本用法</title>
      <link>https://linxueqing.github.io/posts/js%E5%AF%B9%E8%B1%A1%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</link>
      <pubDate>Sat, 07 Mar 2020 18:50:47 +0800</pubDate>
      
      <guid>https://linxueqing.github.io/posts/js%E5%AF%B9%E8%B1%A1%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</guid>
      <description>Js 对象基本用法 1：声明对象的两种语法 let obj1 = new Object({&#39;name&#39;:&#39;Jerry&#39;}); //标准写法 let obj2={&#39;name&#39;:&#39;Tom&#39;}; //常用写法 2：如何删除对象的属性 let obj={&#39;name&#39;:&#39;Tom&#39;,&#39;age&#39;:18}; delete obj[&#39;name&#39;]; //删除name属性 3：如何查看对象的属性 let obj={&#39;name&#39;:&#39;Tom&#39;}; Object.keys(obj); //查看对象属性 Object.values(obj); //查看对象值 Object.entries(obj); //查看对象 console.dir(obj); //查看对象 只查看属性
let obj={&#39;name&#39;:&#39;Tom&#39;}; obj[&#39;name&#39;]; obj.name 4：如何修改或增加对象的属性 属性存在就是在修改，不存在就是在增加
let obj={&#39;name&#39;:&#39;Tom&#39;}; obj[&#39;name&#39;] = &#39;Jack&#39;; Object.assign(obj,{p:1,p1:2}); let common = {&#39;国籍&#39;,&#39;中国&#39;}; let person = Object.create(common); 5：&amp;lsquo;name&amp;rsquo; in obj 和 obj.hasOwnProperty(&amp;lsquo;name&amp;rsquo;) 的区别  &amp;lsquo;name&amp;rsquo; in obj 判断obj对象是否存在name属性 obj.hasOwnProperty(&amp;lsquo;name&amp;rsquo;)判断name是不是自有属性  </description>
    </item>
    
    <item>
      <title>Js的基本语法</title>
      <link>https://linxueqing.github.io/posts/js%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Sat, 07 Mar 2020 11:22:00 +0800</pubDate>
      
      <guid>https://linxueqing.github.io/posts/js%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</guid>
      <description>js 的基本语法 什么是表达式和语句 var a = 1 + 3;  上面这行代码就是 js 的一条语句 1 + 3 叫做表达式（expression），值为 4 add(1,2)表达式的值为函数的返回值 语句以分号结尾，一个分号就表示一个语句结束 如果是逗号则表示这条语句还没结束 大小写敏感 空格和回车没有什么意义，对代码没有影响，但是 return 后面不要回车  它们的区别
 表达式一般都有值，语句可能有可能没有，例如只声明一个变量 语句一般会改变环境，例如声明或者赋值 上面两句并不是绝对的  标识符的规则 arg0 _tmp $elem π 你好  第一个字符可以是任意 Unicode 字母（包括英文字母和其他语言的字母），以及美元符号（$）和下划线（_） 第二个及之后的字符除了上面的还可以用数字0~9  if else 语句 if (m === 3) { // 满足条件时，执行的语句 } else { // 不满足条件时，执行的语句 } while 循环 while (条件) 语句; // 或者 while (条件) 语句; for 循环 for (初始化表达式; 条件; 递增表达式) 语句 // 或者 for (初始化表达式; 条件; 递增表达式) { 语句 } 虽然大括号可以省略，尽量不要省略，以免代码有歧义</description>
    </item>
    
    <item>
      <title>JavaScript诞生年鉴</title>
      <link>https://linxueqing.github.io/posts/javascript%E8%AF%9E%E7%94%9F%E5%B9%B4%E9%89%B4/</link>
      <pubDate>Wed, 04 Mar 2020 22:35:53 +0800</pubDate>
      
      <guid>https://linxueqing.github.io/posts/javascript%E8%AF%9E%E7%94%9F%E5%B9%B4%E9%89%B4/</guid>
      <description>JavaScript 诞生年鉴  1995 年  布兰登·艾奇（Brendan Eich）加入网景公司，临危受命，用了十天时间为网景公司浏览器开发了 JavaScript 功能
 1996 年 8 月  微软发布 IE3，支持 JScript
 1996 年 11 月  网景向 ECMA 提交语言标准，由于版权问题，JS 语言不能叫 JavaScript，叫 ECMAScript
 1997 年  第一版 ECMAScript 发布
 1998 年  网景被收购，同年网景将浏览器开源（Firefox）
 1999 年  第三版 ECMAScript 发布，这个版本目前使用最广泛
 2001 年  IE 绑定 Windows XP 一起发布
 2004 年  IE 全球市场占有率 80%，IE 却不兼容 W3C 标准，特别是 CSS，给了 Firefox 和 Chrome 机会</description>
    </item>
    
    <item>
      <title>Url</title>
      <link>https://linxueqing.github.io/posts/url/</link>
      <pubDate>Tue, 03 Mar 2020 21:53:05 +0800</pubDate>
      
      <guid>https://linxueqing.github.io/posts/url/</guid>
      <description>浅析 URL URL 包含哪几部分，每部分分别有什么作用  协议：是指规则的约定，例如 Web 使用一种名为 HTTP 的协议作为规范 域名或者 IP：服务器地址 端口号：服务器提供服务的一个号码 路径：带层次指向一个服务器的不同页面 查询字符串：指向一个页面的不同内容 锚点：指向同一个内容的不同位置的片段标识符，不会传给服务器  DNS 的作用是什么，nslookup 命令怎么用 DNS (Domain Name System) 域名系统，将方便用户记忆的域名地址 domain names 转换为 IP 数字串 IP addresses，从而在因特网 Internet 或者私有网络上找到特定的机器。 简单来说就是域名对应 IP 的一个服务。
nslookup 是一种网络管理命令行工具，可用于查询 DNS 域名和 IP 地址。
nslookup 询问服务器 IP 命令使用方法
 nslookup qq.com IP 的作用是什么，ping 命令怎么用 IP (Internet protocol) 互联网协议，约定了两件事：
 如何定位一台设备，可以是电脑、手机、路由器。。。 如何封装数据报文，与其他设备交流  ping 命令使用方法
 ping qq.com 域名是什么，分别哪几类域名 域名是服务器 IP 地址对应的名字，方便使用</description>
    </item>
    
    <item>
      <title>Css01</title>
      <link>https://linxueqing.github.io/posts/css01/</link>
      <pubDate>Sun, 01 Mar 2020 22:09:57 +0800</pubDate>
      
      <guid>https://linxueqing.github.io/posts/css01/</guid>
      <description>CSS 定位 在了解 CSS 定位之前，先问个问题，CSS 布局和定位有什么区别？
区别大了！！ 布局是屏幕平面上的，定位是垂直于屏幕的。
这还要从盒模型和文档流开始说起 盒模型 盒模型什么样的？从外面到里面依次是：
 margin border padding content  第一种盒模型，浏览器算的宽度是 内容宽度 box-sizing:content-box; 第二种盒模型，浏览器算的宽度是 border+padding+内容宽度 box-sizing:border-box; 文档流 标准文档流 元素排版布局过程中，元素会默认自动从左往右，从上往下的流式排列方式。
正常文档流的元素是怎么垂直于屏幕分层的呢？从上向下一次是？  内联子元素 块级子元素 border background  那脱离文档流的元素呢？ 先了解下，CSS中哪些属性会让元素脱离文档流
 float absolute fixed  在脱离文档流元素的影响下，新的垂直于屏幕分层情况如下：  定位元素 内联子元素 float 块级子元素 border background z-index 为负数  </description>
    </item>
    
    <item>
      <title>Html03</title>
      <link>https://linxueqing.github.io/posts/html03/</link>
      <pubDate>Mon, 24 Feb 2020 11:29:34 +0800</pubDate>
      
      <guid>https://linxueqing.github.io/posts/html03/</guid>
      <description>蒋勋 </description>
    </item>
    
    <item>
      <title>HTML常用标签</title>
      <link>https://linxueqing.github.io/posts/html02/</link>
      <pubDate>Sun, 23 Feb 2020 22:49:08 +0800</pubDate>
      
      <guid>https://linxueqing.github.io/posts/html02/</guid>
      <description>HTML 常用标签  a 标签的用法  可以创建通向其他网页、文件、同一页面内的位置、电子邮件地址或任何其他 URL 的超链接。
&amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://example.com&amp;quot;&amp;gt;Website&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;mailto:m.bluth@example.com&amp;quot;&amp;gt;Email&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;tel:+123456789&amp;quot;&amp;gt;Phone&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt;  img 标签的用法
将一份图像嵌入文档
  &amp;lt;img class=&amp;quot;picture&amp;quot; src=&amp;quot;/images/332.jpg&amp;quot; alt=&amp;quot;dog&amp;quot;&amp;gt;  table 标签的用法
表示表格数据 — 即通过二维数据表表示的信息。
  &amp;lt;table&amp;gt; &amp;lt;thead&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;th colspan=&amp;quot;2&amp;quot;&amp;gt;The table header&amp;lt;/th&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/thead&amp;gt; &amp;lt;tbody&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;The table body&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;with two columns&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/tbody&amp;gt; &amp;lt;/table&amp;gt;  其他感想
HTML 标签学习的最好用法就是多练习，直接运行查看不同标签属性效果，加深印象
  </description>
    </item>
    
    <item>
      <title>HTML入门笔记1</title>
      <link>https://linxueqing.github.io/posts/html01/</link>
      <pubDate>Sat, 22 Feb 2020 17:54:06 +0800</pubDate>
      
      <guid>https://linxueqing.github.io/posts/html01/</guid>
      <description>HTML 入门笔记 1   HTML 是谁发明的
HTML 的英文全称是 Hypertext Marked Language，即超文本标记语言。HTML 是由 Web 的发明者 Tim Berners-Lee 和同事 Daniel W. Connolly 于 1990 年创立的一种标记语言，它是标准通用化标记语言 SGML 的应用。
  HTML 起手应该写什么
  &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;zh-CN&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt; &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;ie=edge&amp;quot;&amp;gt; &amp;lt;title&amp;gt;标题&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;  常用的表章节的标签有哪些，分别是什么意思（h1~h6、section、article、main、aside 等等）
 h1~h6 标题 section 章节 article 文章 main 页面主要内容 aside 页面次要内容    全局属性有哪些?
所有标签都有的属性</description>
    </item>
    
    <item>
      <title>如何用 hugo 搭建个人博客</title>
      <link>https://linxueqing.github.io/posts/%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Fri, 21 Feb 2020 14:49:14 +0800</pubDate>
      
      <guid>https://linxueqing.github.io/posts/%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/</guid>
      <description>如何用 hugo 搭建个人博客 第一步：安装Hugo  Mac下直接使用 Homebrew 安装： brew install hugo  Windows安装方式   下载地址 点击进入下载页面下载 hugo_0.65.1_Windows-64bit.zip（0.65.1版本号可以不同） 解压，把hugo.exe放到本地，例如我的本地地址：D:\Software\hugo，再把这个地址加到全局变量PATH里(不会加可以自行搜索) 重启终端，运行查看版本，确认是否配置成功 hugo version   第二步：快速搭建博客  第一种方式  进入官网，点击Quick Start快速开始，从step2到step7跟着操作
  第二种方式
跟着我复制
 ``` hugo new site quickstart cd quickstart git init git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke echo &#39;theme = &amp;quot;ananke&amp;quot;&#39; &amp;gt;&amp;gt; config.toml hugo new posts/我的第一篇博客.md ```  完成上面步骤后，得到一个public目录，这就是我们的博客站点，执行下面语句可以预览非草稿
 ``` hugo server ```    注意事项   上面的命令，其中下面这句新建一篇博客之后</description>
    </item>
    
    <item>
      <title>开博大吉</title>
      <link>https://linxueqing.github.io/posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</link>
      <pubDate>Fri, 21 Feb 2020 14:13:43 +0800</pubDate>
      
      <guid>https://linxueqing.github.io/posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</guid>
      <description>大家好 我的博客开通了</description>
    </item>
    
  </channel>
</rss>